manifest:
  info:
    name: rest-api
    description: REST Api
    version: "2.1"
    category: superman/web
    owner:
      name: Dmitry Kulikov
      email: kulikov.dm@gmail.com

  include:
    - file: include.d/site.yml

  build:
    - gradle: install
    - docker-image: {}

  deploy:
    - marathon:
        mem: 1024
        docker:
          ports:
            - containerPort: 8080
            - name: jmx

  release:
    - http:
        defaults:
          public: true

        routes:
          - host ? {{ vars.env }}:
              dev: "{{ info.feature-prefix }}api.superman.qa"
              prod: "api.superman.space"

tests:
  - run: "build.gradle --build-number=34"
    expect:
      build: ""
      cmd: gradle clean %s -Pversion="2.1.34" --refresh-dependencies
      envs: {}
      gradle: install
      image: frekele/gradle:4.2-jdk8
      shell: "/bin/sh -c '%s'"
      no-push: "false"
      volumes:
        - "~/.gradle/caches:/root/.gradle/caches"
        - "~/.gradle/wrapper:/root/.gradle/wrapper"
        - "~/.gradle/init.gradle:/root/.gradle/init.gradle"
      docker-args: "--entrypoint=''"
      workdir: "${PWD}"

  - run: "build.docker-image --build-number=34"
    expect:
      image: registry-superman.superman.space/superman/web/rest-api:v2.1.34
      tags: []
      workdir: "."
      name: ""
      category: ""
      no-push: "false"
      build-args: "--pull"
      current-branch: ""
      images: [ ]
      login:
        user: "${DOCKER_REGISTRY_USER}"
        password: "${DOCKER_REGISTRY_PASSWORD}"

  - run: "build.docker-image --build-number=34 --branch=feature/new-design"
    expect:
      image: registry-superman.superman.space/superman/web/rest-api-new-design:v2.1.34
      tags: []
      workdir: "."
      name: ""
      category: ""
      no-push: "false"
      build-args: "--pull"
      current-branch: "feature/new-design"
      images: [ ]
      login:
        user: "${DOCKER_REGISTRY_USER}"
        password: "${DOCKER_REGISTRY_PASSWORD}"

  - run: "deploy.marathon --zone=dev1 --build-number=34 --branch=master"
    expect:
      app-name: superman/web/rest-api-v2.1.34
      backoff-factor: 3.0
      backoff-seconds: 3
      cluster: ''
      branch: 'master'
      git-repo: ''
      cmd: bin/start
      constraints: [["hostname", "UNIQUE"]]
      consul-address: consul.superman.space
      cpu: 0.1
      docker:
        args: []
        enabled: true
        image: registry-superman.superman.space/superman/web/rest-api:v2.1.34
        network: BRIDGE
        parameters: {}
        ports:
          - containerPort: 8080
          - name: jmx
        volumes: []
      environment:
        ENV: dev
        ZONE: dev1
        SERVICE_BUILD_NUMBER: '34'
        SERVICE_CHECK_TCP: true
        SERVICE_MEMORY: '1024'
        SERVICE_NAME: superman/web/rest-api-v2.1.34
        SERVICE_KEY: superman/web/rest-api
        SERVICE_TAG: rest-api
        SERVICE_VERSION: 2.1.34
      envs: {}
      instances: 1
      listen-port: "$PORT0"
      marathon-address: marathon.superman.space
      max-launch-delay-seconds: 300
      backoff-max-elapsed-time: 5m
      max-over-capacity: 0
      mem: 1024
      min-health-capacity: 0
      expunge-after-seconds: 86400
      inactive-after-seconds: 1200
      package-uri: []
      ports:
        - name: 'default'
          port: 0
      readiness:
        path: ''
        statuses: [200, 404]
        interval-seconds: 10
        timeout-seconds: 5
      task-kill-grace-period-seconds: 60
      user: root
      version: v2.1.34

  - run: "deploy.marathon --zone=dev1 --build-number=42 --branch=new-design"
    expect:
      app-name: superman/web/rest-api-new-design
      backoff-factor: 3.0
      backoff-seconds: 3
      cluster: ''
      branch: 'new-design'
      git-repo: ''
      cmd: bin/start
      constraints: [["hostname", "UNIQUE"]]
      consul-address: consul.superman.space
      cpu: 0.1
      docker:
        args: []
        enabled: true
        image: registry-superman.superman.space/superman/web/rest-api-new-design:v2.1.42
        network: BRIDGE
        parameters: {}
        ports:
          - containerPort: 8080
          - name: jmx
        volumes: []
      environment:
        ENV: dev
        ZONE: dev1
        SERVICE_BUILD_NUMBER: '42'
        SERVICE_CHECK_TCP: true
        SERVICE_MEMORY: '1024'
        SERVICE_NAME: superman/web/rest-api-new-design
        SERVICE_TAG: rest-api-new-design
        SERVICE_KEY: superman/web/rest-api
        SERVICE_VERSION: 2.1.42
      envs: {}
      instances: 1
      listen-port: "$PORT0"
      marathon-address: marathon.superman.space
      max-launch-delay-seconds: 300
      backoff-max-elapsed-time: 5m
      max-over-capacity: 0
      mem: 1024
      min-health-capacity: 0
      expunge-after-seconds: 86400
      inactive-after-seconds: 1200
      package-uri: []
      ports:
        - name: 'default'
          port: 0
      readiness:
        path: ''
        statuses: [200, 404]
        interval-seconds: 10
        timeout-seconds: 5
      task-kill-grace-period-seconds: 60
      user: root
      version: v2.1.42

  - run: "deploy.marathon --zone=prod1 --build-number=126"
    expect:
      app-name: superman/web/rest-api-v2.1.126
      backoff-factor: 3.0
      backoff-seconds: 3
      cluster: ''
      branch: ''
      git-repo: ''
      cmd: bin/start
      constraints: [["hostname", "UNIQUE"]]
      consul-address: consul.superman.space
      cpu: 0.1
      docker:
        args: []
        enabled: true
        image: registry-superman.superman.space/superman/web/rest-api:v2.1.126
        network: BRIDGE
        parameters: {}
        ports:
          - containerPort: 8080
          - name: jmx
        volumes: []
      environment:
        ENV: prod
        ZONE: prod1
        SERVICE_BUILD_NUMBER: '126'
        SERVICE_CHECK_TCP: true
        SERVICE_MEMORY: '1024'
        SERVICE_NAME: superman/web/rest-api-v2.1.126
        SERVICE_KEY: superman/web/rest-api
        SERVICE_TAG: rest-api
        SERVICE_VERSION: 2.1.126
      envs: {}
      instances: 1
      listen-port: "$PORT0"
      marathon-address: marathon.superman.space
      max-launch-delay-seconds: 300
      backoff-max-elapsed-time: 5m
      max-over-capacity: 0
      mem: 1024
      min-health-capacity: 0
      expunge-after-seconds: 86400
      inactive-after-seconds: 1200
      package-uri: []
      ports:
        - name: 'default'
          port: 0
      readiness:
        path: ''
        statuses: [200, 404]
        interval-seconds: 10
        timeout-seconds: 5
      task-kill-grace-period-seconds: 60
      user: root
      version: v2.1.126

  - run: "release.http --zone=dev1 --build-number=126 --stage=staging"
    expect:
      consul-address: consul.superman.space
      full-name: superman/web/rest-api-v2.1.126
      name-prefix: superman/web/rest-api-v
      outdated-timeout-sec: 600
      route-vars: ''
      maintenance: ''
      defaults:
        public: true
        enabled: true
      routes:
        - host: api.superman.qa
      stage: staging

  - run: "release.http --zone=dev1 --build-number=126 --branch=new-design"
    expect:
      consul-address: consul.superman.space
      full-name: superman/web/rest-api-new-design
      name-prefix: superman/web/rest-api-new-design
      outdated-timeout-sec: 600
      route-vars: ''
      maintenance: ''
      defaults:
        public: true
        enabled: true
      routes:
        - host: new-design-api.superman.qa
      stage: ''

  - run: "outdated --zone=dev1 --build-number=126 --branch=new-design"
    expect:
      enabled: true
      consul-address: "consul.superman.space"
      full-name: "superman/web/rest-api-new-design"

  - run: "test.coverage --branch=new-test --build-number=128 --test-type=component --coverage-file=coverage/coverage.exec --target-url=https://localhost.localdomain/ref/path --coverage-tolerance=1.2"
    expect:
      branch: "new-test"
      exec-file: "coverage/coverage.exec"
      database-connection-env: "TEST_COVERAGE_DATABASE_URL"
      generate:
        classfiles:
          - "classes"
        sourcefiles:
          - "src/main/java"
          - "src/main/scala"
        jacococli-jar: "jacococli.jar"
        html-output-dir: "coverage"
      ref: ""
      repo: ""
      test-type: "component"
      version: "2.1.128"
      main-branch: "master"
      check:
        context: "coverage"
        target-url: "https://localhost.localdomain/ref/path"
        tolerance: "1.2"
