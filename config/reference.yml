info:
  name: ""
  version: "0.0"
  description: "{{ info.name }}"

  build-version ? {{ vars.branch }}:
    "^hotfix[-/].+": "{{ info.version }}.{{ vars.build-number }}-{{ vars.branch | lower | replace('\\W|_', '-') }}"
    "*": "{{ info.version }}.{{ vars.build-number }}"

  hotfix-suffix ? {{ vars.branch }}:
    "^hotfix[-/].+": "-{{ vars.branch | lower | replace('\\W|_', '-') }}"
    "*": ""

  feature ? {{ vars.branch }}:
    "": ""
    "master": ""
    "development": ""
    "^hotfix[-/].+": ""
    "^feature[-/](?P<feature>.+)": "{{ match.feature | lower | replace('\\W|_', '-') }}"
    "*": "{{ vars.branch | lower | replace('\\W|_', '-') }}"

  feature-suffix ? {{ info.feature }}:
    "": ""
    "*": "-{{ info.feature }}"

  feature-prefix ? {{ info.feature }}:
    "": ""
    "*": "{{ info.feature }}-"

  full-name: "{{ info.category }}/{{ info.name }}{{ info.feature-suffix }}"

vars:
  dc: 0
  env: "{{ vars.zone | replace('\\d', '') }}"
  zone: qa
  build-number: 0
  stage-counter: 0
  purge: false
  no-push: false
  context: build

conf:
  marathon:
    app-name: "{{ info.full-name }}"
    address: marathon
    registry-host: webdav.marathon
    registry-path: "/{{ info.category }}/{{ info.name }}/{{ info.name }}{{ info.feature-suffix }}-v{{ info.build-version }}.tar.gz"
    registry-url: "http://{{ conf.marathon.registry-host }}{{ conf.marathon.registry-path }}"

  consul:
    address: consul

  kube:
    full-name: "{{ info.name | replace('\\W|_', '-') }}{{ info.feature-suffix | replace('\\W|_', '-') }}"

  metronome:
    address: http://localhost:8082

  docker:
    registry: ""
    image: "{{ conf.docker.registry }}{{ info.category }}/{{ info.name }}{{ info.feature-suffix }}:v{{ info.build-version }}"
    workdir: "${PWD}"

  gocd:
    api-url: https://localhost:8154
    environment: dev
    pipeline-name: "{{ info.name }}{{ info.feature-suffix }}{{ info.hotfix-suffix }}"
    auto-update: true
    workingdir: "sources"
    default-template: "serve-service-tpl"
    feature-template: "serve-featured-tpl"
    hotfix-template: "serve-hotfix-tpl"
    template ? "{{ info.feature }}:{{ info.hotfix-suffix }}":
      ":": "{{ conf.gocd.default-template }}"
      "^:.+": "{{ conf.gocd.hotfix-template }}"
      "*": "{{ conf.gocd.feature-template }}"

  graphite:
    host: graphite

gocd:
  pipeline:
    create:
      purge: "{{ vars.purge }}"
      api-url: "{{ conf.gocd.api-url }}"
      environment: "{{ conf.gocd.environment }}"
      branch: "{{ vars.branch }}"
      name-suffix: ""
      allowed-branches: ["master"]
      depends: []

      pipeline:
        group ? "{{ info.feature }}:{{ info.hotfix-suffix }}":
          ":": "{{ info.category | replace('\\W|_', '-') }}"
          "^:.+": "hotfix"
          "*": "{{ info.category | replace('\\W|_', '-') }}-branches"
        pipeline:
          name: "{{ conf.gocd.pipeline-name }}"
          template: "{{ conf.gocd.template }}"
          label_template: "{{ info.version }}.${COUNT}"
          envs: {}

          params:
            repo.url: { value: "{{ vars.ssh-repo }}" }
            branch: { value: "{{ vars.branch }}" }
            workingdir: { value: "{{ conf.gocd.workingdir }}" }

          materials:
            - type: "git"
              attributes:
                url: "#{repo.url}"
                destination: "sources"
                branch: "{{ vars.branch }}"
                auto_update: "{{ conf.gocd.auto-update }}"
                shallow_clone: true

    run:
      pipeline-name: "{{ conf.gocd.pipeline-name }}"
      api-url: "{{ conf.gocd.api-url }}"
      environment: "{{ conf.gocd.environment }}"
      branch: "{{ vars.branch }}"
      name-suffix: ""

      schedule:
        update_materials_before_scheduling: true

github:
  status:
    repo: "{{ vars.repo }}"
    ref: "{{ vars.ref }}"
    state: "{{ vars.state }}"
    target-url: "{{ vars.target-url }}"
    description: "{{ vars.state }}"
    context: "CI"

build:
  docker: &build-docker
    image: "{{ info.full-name }}"
    docker-args: ""
    build: ""
    cmd: "test"
    shell: "/bin/sh -c '%s'"
    no-push: "{{ vars.no-push }}"
    workdir: "{{ conf.docker.workdir }}"
    volumes: []
    envs: {}

  sbt:
    <<: *build-docker
    image: 1science/sbt:0.13-oracle-jdk-8
    volumes:
      - '~/.ivy2:/root/.ivy2'
    cmd: sbt ";set every version := \"{{ info.build-version }}\"" %s

  gradle:
    <<: *build-docker
    image: frekele/gradle:4.2-jdk8
    volumes:
      - '~/.gradle/caches:/root/.gradle/caches'
      - '~/.gradle/wrapper:/root/.gradle/wrapper'
      - '~/.gradle/init.gradle:/root/.gradle/init.gradle'
    docker-args: "--entrypoint=''"
    cmd: gradle clean %s -Pversion="{{ info.build-version }}" --refresh-dependencies

  sonarqube:
    <<: *build-docker
    image: sonarsource/sonar-scanner-cli
    volumes:
      - '${PWD}:/usr/src'
      - '~/.sonar/cache:/opt/sonar-scanner/.sonar/cache'
    cmd: ''
    shell: '%s'
    docker-args: '--user="$(id -u):$(id -g)"'
    properties: |
      sonar.projectKey={{ info.category | replace('\\W|/', '-') }}-{{ info.name | replace('\\W|/', '-') }}
      sonar.sourceEncoding=UTF-8
      sonar.projectVersion={{ info.build-version }}
      sonar.java.binaries=build/classes
    envs:
      SONAR_HOST_URL: https://localhost:9000
      SONAR_TOKEN: xxx123

  node:
    <<: *build-docker
    image: node:8
    volumes:
      - '~/.cache/yarn:/root/.cache/yarn'
      - '~/.npm:/root/.npm'
    cmd: "%s"

  marathon:
    source: "target/pack"
    registry-url: "{{ conf.marathon.registry-url }}"

  tarball:
    files: []
    registry-url: "{{ conf.marathon.registry-url }}"

  docker-image:
    image: "{{ conf.docker.image }}"
    name: ""
    category: ""
    tags: []
    workdir: "."
    build-args: "--pull"
    no-push: "{{ vars.no-push }}"
    current-branch: "{{ vars.branch }}"
    environment: {}
    labels: {}
    images: []
#      - branch: master
#        dockerfile: Dockerfile.custom
#        repository: docker.custom.com
#        skip-errors: true
    login:
      user: ""
      password: ""

  monorepo:
    lerna-image: "lerna"
    feature: "{{ info.feature }}"
    build-number: "{{ vars.build-number }}"
    branch: "{{ vars.branch }}"
    commit: "{{ vars.commit }}"
    command: docker run --rm -v ${PWD}:/src -v ~/.cache/yarn:/root/.cache/yarn -v ~/.npm:/root/.npm %s lerna exec --since {{ vars.previous-commit }} --loglevel=error pwd
    feature-tasks: []
      # - serve build --branch="{{ vars.branch }}" --build-number="{{ vars.build-number }}"
      # - serve deploy --zone=qa --branch="{{ vars.branch }}" --build-number="{{ vars.build-number }}"
      # - serve release --zone=qa --branch="{{ vars.branch }}" --build-number="{{ vars.build-number }}"

  notify:
    env: "{{ vars.env }}"
    event: build
    message: "{{ vars.message }}"
    build-number: "{{ vars.build-number }}"
    changelog-for: ""
    manifest: "{{ vars.manifest }}"

deploy:
  marathon:
    consul-address: "{{ conf.consul.address }}"
    marathon-address: "{{ conf.marathon.address }}"
    app-name: "{{ conf.marathon.app-name }}"
    version: "v{{ info.build-version }}"
    branch: "{{ vars.branch }}"
    git-repo: "{{ vars.git-repo }}"
    package-uri: []
    instances: 1
    mem: 128
    cpu: 0.1
    cmd: "bin/start"
    user: "root"
    cluster: ""
    constraints:
      - [hostname, UNIQUE]
    listen-port: "$PORT0"
    min-health-capacity: 0.0
    max-over-capacity: 0.0
    backoff-seconds: 3
    backoff-factor: 3.0
    max-launch-delay-seconds: 300
    task-kill-grace-period-seconds: 60
    backoff-max-elapsed-time: 5m
    inactive-after-seconds: 1200
    expunge-after-seconds: 86400
    readiness:
      path: ""
      statuses: [200, 404]
      interval-seconds: 10
      timeout-seconds: 5
    ports:
      - { port: 0, name: "default" }
    docker:
      enabled: true
      args: []
      image: "{{ conf.docker.image }}"
      network: BRIDGE
      parameters: {}
      ports:
        - { containerPort: 8080, hostPort: 0, name: "default" }
      volumes: []
    envs: {}
    environment:
      ENV: "{{ vars.env }}"
      ZONE: "{{ vars.zone }}"
      SERVICE_KEY: "{{ info.category }}/{{ info.name }}"
      SERVICE_TAG: "{{ info.name }}{{ info.feature-suffix }}"
      SERVICE_NAME: "{{ conf.marathon.app-name }}"
      SERVICE_VERSION: "{{ info.build-version }}"
      SERVICE_BUILD_NUMBER: "{{ vars.build-number }}"
      SERVICE_MEMORY: "{{ deploy.marathon.mem }}"
      SERVICE_CHECK_TCP: true

  kube:
    replicas: 1
    requests:
      memory: "64M"
      cpu: "0.1"
    limits:
      memory: "512M"
      cpu: "2"
    ports: []
    volumes: []
    envs: {}
    environment:
      ENV: "{{ vars.env }}"
      SERVICE_TAG: "{{ info.name }}{{ info.feature-suffix }}"
      SERVICE_NAME: "{{ conf.marathon.app-name }}"
      SERVICE_VERSION: "{{ info.build-version }}"
      SERVICE_BUILD_NUMBER: "{{ vars.build-number }}"
      SERVICE_CHECK_TCP: true

    readinessProbe:
      periodSeconds: 5
      successThreshold: 3
      timeoutSeconds: 3

    deployment:
      kind: Deployment
      apiVersion: extensions/v1beta1
      metadata:
        name: "{{ conf.kube.full-name }}"
      spec:
        replicas: "{{ deploy.kube.replicas }}"
        revisionHistoryLimit: 0
        strategy:
          type: RollingUpdate
          rollingUpdate:
            maxUnavailable: 0
            maxSurge: 1
        template:
          metadata:
            labels:
              app: "{{ conf.kube.full-name }}"
          spec:
            containers:
              - name: "{{ conf.kube.full-name }}"
                image: "{{ conf.docker.image }}"
                imagePullPolicy: Always

  tarball:
    cluster: "localhost"
    ssh-user: "root"
    package-name: "{{ info.full-name }}"
    package-uri: "{{ conf.marathon.registry-url }}"
    install-root: "/local/app/tarball"
    user: "root"
    group: "root"
    consul-address: "{{ conf.consul.address }}"
    hooks: []
      # - postinstall: ./install.sh

  artifact:
    auth: "user:password"
    artifact: ""
    artifactory-url: "https://artifactory.example.com"
    upload-path: "/artifactory/{{ info.category }}/{{ info.name }}/{{ info.feature }}/"
    current-branch: "{{ vars.branch }}"
    branch: "master"

  secrets:
    env: "{{ vars.env }}"
    consul:
      address: "{{ conf.consul.address }}"
      path: "services/secrets/{{ info.category }}/{{ info.name }}"

  metronome:
    enabled: true
    id: "{{ info.name }}{{ info.feature-suffix }}"
    metronome-address: "{{ conf.metronome.address }}"
    cpu: 0.1
    mem: 64
    disk: 128
    envs: {}
    cmd: ""
    docker:
      image: "{{ conf.docker.image }}"
    schedules:
      - cron: "1 * * * *"
        concurrency-policy: ALLOW
        starting-deadline-seconds: 60
        timezone: "Europe/Moscow"

  copy-db:
    enabled ? {{ vars.env }}-{{ info.feature }}: { "qa-.+": true }
    from: postgres
    to: "{{ deploy.copy-db.from }}{{ info.feature-suffix | replace('\\W', '-') }}"
    owner: postgres
    app-name: "{{ conf.marathon.app-name }}"
    consul-address: "{{ conf.consul.address }}"
    create-command: |
      docker exec compose_stolon-proxy_1 \
        bash -c 'psql -U postgres -h 127.0.0.1 -p 25432 -lqt | grep -qw " {.to} " || \
          (createdb -U postgres -h 127.0.0.1 -p 25432 -O {.owner} "{.to}" \
          && pg_dump -U postgres -h 127.0.0.1 -p 25432 "{.from}" \
          | psql -U postgres -h 127.0.0.1 -p 25432 "{.to}")'
    purge-command: |
      docker exec compose_stolon-proxy_1 \
        psql -U postgres -h 127.0.0.1 -p 25432 -c \"SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname='{.to}'\" \
          && docker exec compose_stolon-proxy_1 dropdb -U postgres -h 127.0.0.1 -p 25432 --if-exists '{.to}'
    ssh:
      host: localhost
      user: root
      key: "/etc/serve/copy_db_ssh_key"

  notify:
    env: "{{ vars.env }}"
    event: deploy
    message: "{{ vars.message }}"
    build-number: "{{ vars.build-number }}"
    changelog-for: ""
    manifest: "{{ vars.manifest }}"

release:
  http:
    consul-address: "{{ conf.consul.address }}"
    name-prefix ? {{ info.feature }}:
      "": "{{ info.full-name }}-v"
      "*": "{{ info.full-name }}"
    full-name: "{{ info.full-name }}"
    outdated-timeout-sec ? {{ vars.env }}: { qa: 60, "*": 600 }
    stage: "{{ vars.stage }}"
    maintenance: "{{ vars.maintenance }}"
    route-vars: "{{ vars.route-vars }}"
    defaults:
      enabled: true
      public: true
    routes: []

  tcp:
    consul-address: "{{ conf.consul.address }}"
    full-name: "{{ info.full-name }}"
    port: ""
    protocol: ""

  kube-service:
    name: "{{ conf.kube.full-name }}"
    ports: [port: 80]

  ingress:
    name: "{{ info.name | replace('\\W|_', '-') }}{{ info.feature-suffix | replace('\\W|_', '-') }}"
    app: "{{ conf.kube.full-name }}"
    routes: []

    service:
      kind: Service
      apiVersion: v1
      spec:
        type: LoadBalancer
        ports: []

    ingress:
      kind: Ingress
      apiVersion: extensions/v1beta1

outdated:
  enabled ? {{ info.hotfix-suffix }}: { "": true, "*": false }
  consul-address: "{{ conf.consul.address }}"
  full-name: "{{ info.full-name }}"

test:
  autotest:
    project: "{{ info.full-name }}"
    version: "{{ info.build-version }}"
    repo: "git@github.com:example/test.git"
    suite: "{{ info.name }}-test"
    current-env: "{{ vars.env }}"
    env: "qa"
    environment: {}

  integration:
    command: "sbt 'testOnly -- -n Integration'"
    current-env: "{{ vars.env }}"
    env: "qa"

  component:
    current-env: "{{ vars.env }}"
    env: "qa"
    name: "{{ info.name }}{{ info.feature-suffix }}"
    compose: {}
    components: []
    timeout: 10m
    check-file-exist: ""
    feature-test-image: ""

  coverage:
    generate:
      jacococli-jar: "jacococli.jar"
      sourcefiles:
        - "src/main/java"
        - "src/main/scala"
      classfiles:
        - "classes"
      html-output-dir: "coverage"
    database-connection-env: "TEST_COVERAGE_DATABASE_URL"
    exec-file: "coverage/coverage.exec"
    main-branch: "master"
    repo: "{{ vars.repo }}"
    branch: "{{ vars.branch }}"
    ref: "{{ vars.ref }}"
    version: "{{ info.build-version }}"
    test-type: "{{ vars.test-type }}"
    check:
      context: "coverage"
      target-url: "{{ vars.target-url }}"
      tolerance: "0"

  upload-zephyr:
    report-file: "tests-output/results.xml"
    project-key: "JIRA"
    main-branch: "master"
    auto-create-test-cases: false
    branch: "{{ vars.branch }}"
    app-name: "{{ info.full-name }}"
    version: "{{ info.build-version }}"
    test-type: "{{ vars.test-type }}"

notify:
  event: "{{ vars.event }}"

  consul:
    address: "{{ conf.consul.address }}"
    path: "services/data/{{ info.full-name }}/notify.deploy"

  channels:
    example:
      type: slack
      color: "#2EB886"
      message: "Hello, my {{ info.full-name }} v{{ info.build-version }}{{ info.hotfix-suffix }}"
      webhook: "$NOTIFY_DEPLOY_SLACK_WEBHOOK"
      changelog-for: ""

dashboard:
  kibana3:
    purge: "{{ vars.purge }}"
    enabled ? "{{ info.feature }}{{ info.hotfix-suffix }}": { "": true, "*": false }
    force-recreate: "{{ vars.force }}"
    user: guest
    group: guest
    title: "{{ info.name }}{{ info.feature-suffix }}"
    elastic:
      address: "http://localhost:9200"
      url: "{{ dashboard.kibana3.elastic.address }}/kibana-int/dashboard/{{ dashboard.kibana3.title }}"
    dashboard:
      title: "{{ dashboard.kibana3.title | replace('\\W|_', '-') }}"
      editable: true
      failover: false
      style: light
      panel_hints: true
      refresh: false
      index:
        interval: day
        pattern: "[journalbeat-]YYYY.MM.DD"
        default: NO_TIME_FILTER_OR_INDEX_PATTERN_NOT_MATCHED
        warm_fields: true
      pulldowns:
        - { "type": "query", "collapse": true, "notice": false, "query": "*", "pinned": true, "history": [], "remember": 10, "enable": true }
        - { "type": "filtering", "collapse": true, "notice": false, "enable": true }
      nav:
        - { "type": "timepicker", "collapse": false, "notice": false, "status": "Stable", "time_options": [ "5m", "15m", "1h", "3h", "6h", "12h", "24h", "2d", "7d", "30d" ], "refresh_intervals": [ "5s", "10s", "30s", "1m", "5m", "15m", "30m", "1h", "2h", "1d" ], "timefield": "@timestamp", "now": true, "filter_id": 0, "enable": true }
      loader: { "save_gist": false, "save_elasticsearch": true, "save_local": true, "save_default": true, "save_temp": true, "save_temp_ttl_enable": true, "save_temp_ttl": "30d", "load_gist": true, "load_elasticsearch": true, "load_elasticsearch_size": 20, "load_local": true, "hide": false }
      services:
        query:
          ids: [0, 1, 2, 3]
          list:
            0: { "id": 0, "color": "#E24D42", "alias": "ERROR", "pin": false, "type": "lucene", "enable": true, "query": "level:(ERROR FATAL)" }
            1: { "id": 1, "color": "#EAB839", "alias": "WARN", "pin": false, "type": "lucene", "enable": true, "query": "level:(WARN WARNING)" }
            2: { "id": 2, "color": "#7EB26D", "alias": "INFO", "pin": false, "type": "lucene", "enable": true, "query": "level:INFO OR (NOT level:(DEBUG TRACE NOTICE ERROR INFO FATAL WARN WARNING))" }
            3: { "id": 3, "color": "#E0F9D7", "alias": "DEBUG", "pin": false, "type": "lucene", "enable": true, "query": "level:(DEBUG TRACE NOTICE)" }
        filter:
          ids: [0, 1, 2]
          list:
            0: { "type": "time", "field": "@timestamp", "from": "now-3h", "to": "now", "mandate": "must", "active": true, "alias": "", "id": 0 }
            1: { "type": "field", "field": "service_tag", "query": "\"{{ dashboard.kibana3.title }}\"", "mandate": "must", "active": true, "alias": "", "id": 1 }
            2: { "type": "field", "field": "level", "query": "ERROR WARN", "mandate": "must", "active": false, "alias": "", "id": 2 }
      rows:
        - title: Graph
          height: 200px
          editable: true
          collapse: false
          collapsable: true
          notice: false
          panels:
            - { "span": 12, "editable": true, "group": [ "default" ], "type": "histogram", "mode": "count", "time_field": "@timestamp", "value_field": null, "auto_int": true, "resolution": 100, "interval": "30s", "fill": 3, "linewidth": 3, "timezone": "browser", "spyable": true, "zoomlinks": true, "bars": true, "stack": true, "points": false, "lines": false, "legend": true, "x-axis": true, "y-axis": true, "percentage": false, "interactive": true, "queries": { "mode": "all", "ids": [ 0 ] }, "title": "Events over time", "intervals": [ "auto", "1s", "1m", "5m", "10m", "30m", "1h", "3h", "12h", "1d", "1w", "1M", "1y" ], "options": true, "tooltip": { "value_type": "cumulative", "query_as_alias": true }, "scale": 1, "y_format": "none", "grid": { "max": null, "min": 0 }, "annotate": { "enable": false, "query": "*", "size": 20, "field": "_type", "sort": [ "_score", "desc" ] }, "pointradius": 5, "show_query": true, "legend_counts": true, "zerofill": true, "derivative": false }
        - title: Events
          height: 350px
          editable: true
          collapse: false
          collapsable: true
          notice: false
          panels:
            - { "title": "All events", "error": false, "span": 12, "editable": true, "group": [ "default" ], "type": "table", "size": 100, "pages": 5, "offset": 0, "sort": [ "@timestamp", "desc" ], "style": { "font-size": "9pt" }, "overflow": "min-height", "fields": [ "@timestamp", "level", "message" ], "localTime": true, "timeField": "@timestamp", "highlight": [], "sortable": true, "header": true, "paging": true, "spyable": true, "queries": { "mode": "all", "ids": [ 0 ] }, "field_list": false, "status": "Stable", "trimFactor": 800, "normTimes": true, "all_fields": true }

monitoring:
  enabled ? "{{ info.feature }}{{ info.hotfix-suffix }}": { "": true, "*": false }
  env: "{{ vars.env }}"

  consul:
    address: "{{ conf.consul.address }}"
    path: "services/alerts/%s/{{ info.full-name | replace('\\W|_', '-') }}"

  alerts: {}

hooks: {}
#  pre.build:
#    hook-name: echo "pre hello1"
#
#  post.build:
#    hook-name: echo "post hello1"
